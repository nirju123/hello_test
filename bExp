//finding a to the power b using binary ex[ponentiation technique
int bExp(int a,int b){
    int ans=1;
      while(b){
        if(b & 1){
            ans = (ans*a) %mod;
         }
        a =(a*a)%mod; b>>=1;
       }
     return ans; 
}
//multiplying matrix a with matrix b ans thus raising it up to the power n
vector<vector<int>> bExm(vector<vector<int>> &a, vector<vector<int>> &b){
        int n = a.size();
        vector<vector<int>> c(n, vector<int> (n,0));
        for(int i = 0; i < n; i++)
            for(int j = 0; j < n; j++)
                for(int k = 0; k < n; k++)
                    c[i][k] =(c[i][k]+ a[i][j] * b[j][k])%mod;
                
        return c;
    }

 while(n){
        if(n & 1){
            ans = bExm(ans, a);
         }
        a = bExm(a, a), n>>=1;
       }
//coverting decimal representaion into binary one
//1*inbuilt fuction which return a 32 bit object of the class bitset
bitset<32> binary(int n){
        bitset<32> binaryRepresentation(n);
        //auto s=binaryRepresentation;
        return binaryRepresentation;
}

vector<int> decToBinary(int n)
{
     vector<int> a;// Size of an integer is assumed to be 32 bits
    for (int i = 31; i >= 0; i--) {
        int k = n >> i; //left shift the digit to first place
        
        if (k & 1)a.push_back(1);
        else a.push_back(0);
    }
    return a;
}
